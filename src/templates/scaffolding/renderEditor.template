<% if (property.type == Boolean || property.type == boolean)
  out << renderBooleanEditor(domainClass, property)
else if (property.type && Number.isAssignableFrom(property.type) || (property.type?.isPrimitive() && property.type != boolean))
  out << renderNumberEditor(domainClass, property)
else if (property.type == String)
  out << renderStringEditor(domainClass, property)
else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar)
  out << renderDateEditor(domainClass, property)
else if (property.type == URL)
  out << renderStringEditor(domainClass, property)
else if (property.type && property.isEnum())
  out << renderEnumEditor(domainClass, property)
else if (property.type == TimeZone)
  out << renderSelectTypeEditor("timeZone", domainClass, property)
else if (property.type == Locale)
  out << renderSelectTypeEditor("locale", domainClass, property)
else if (property.type == Currency)
  out << renderSelectTypeEditor("currency", domainClass, property)
else if (property.type == ([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
  out << renderByteArrayEditor(domainClass, property)
else if (property.type == ([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
  out << renderByteArrayEditor(domainClass, property)
else if (property.manyToOne || property.oneToOne)
  out << renderManyToOne(domainClass, property)
else if ((property.oneToMany && !property.bidirectional) || (property.manyToMany && property.isOwningSide())) {
  def str = renderManyToMany(domainClass, property)
  if (str != null) {
    out << str
  }
} else if (property.oneToMany)
  out << renderOneToMany(domainClass, property)

    private renderEnumEditor(domainClass, property) {
		def sb = new StringBuilder("")
        sb << '<g:select class="form-control" name="' << property.name << '"'
 		sb << ' from="${' << "${property.type.name}?.values()" << '}"'
 		sb << ' keys="${' << property.type.name << '.values()*.name()}"'
		if (isRequired()) sb << ' required=""'
		sb << ' value="${' << "${domainInstance}?.${property.name}?.name()" << '}"'
		sb << renderNoSelection(property)
		sb << '/>'
		sb as String
    }

    private renderStringEditor(domainClass, property) {
        if (!cp) {
            return "<g:textField class='form-control' name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
        } else {
			def sb = new StringBuilder("")
            if ("textarea" == cp.widget || (cp.maxSize > 250 && !cp.password && !cp.inList)) {
                sb << '<g:textArea class="form-control" name="' << property.name << '"'
 				sb << ' cols="40" rows="5"'
				if (cp.maxSize) sb << ' maxlength="' << cp.maxSize << '"'
				if (isRequired()) sb << ' required=""'
 				sb << ' value="${' << "${domainInstance}?.${property.name}" << '}"'
				sb << '/>'
            } else if (cp.inList) {
				sb << '<g:select class="form-control" name="' << property.name << '"'
				sb << ' from="${' << "${domainInstance}.constraints.${property.name}.inList" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "${domainInstance}?.${property.name}" << '}"'
				sb << ' valueMessagePrefix="' << "${domainClass.propertyName}.${property.name}" << '"'
				sb << renderNoSelection(property)
				sb << '/>'
			} else {
				if (cp.password) {
					sb << '<g:field class="form-control" type="password"'
				} else if (cp.url) {
					sb << '<g:field class="form-control" type="url"'
				} else if (cp.email) {
					sb << '<g:field class="form-control" type="email"'
				} else {
					sb << '<g:textField class="form-control"'
				}
				sb << ' name="' << property.name << '"'
				if (cp.maxSize) sb << ' maxlength="' << cp.maxSize << '"'
				if (!cp.editable) sb << ' readonly="readonly"'
				if (cp.matches) sb << ' pattern="${' << "${domainInstance}.constraints.${property.name}.matches" << '}"'
				if (isRequired()) sb << ' required=""'
				sb << ' value="${' << "${domainInstance}?.${property.name}" << '}"'
				sb << '/>'
			}
			sb as String
        }
    }

    private renderByteArrayEditor(domainClass, property) {
        return "<input type=\"file\" id=\"${property.name}\" name=\"${property.name}\" />"
    }

    private renderManyToOne(domainClass,property) {
        if (property.association) {
			def sb = new StringBuilder()
            sb << '<g:select class="form-control"'
			// id is "x" and name is "x.id" as the label will have for="x" and "." in an id will confuse CSS
 			sb << ' id="' << property.name << '"'
 			sb << ' name="' << property.name << '.id"'
 			sb << ' from="${' << property.type.name << '.list()}"'
 			sb << ' optionKey="id"'
			if (isRequired()) sb << ' required=""'
 			sb << ' value="${' << "${domainInstance}?.${property.name}" << '?.id}"'
 			sb << ' class="many-to-one"'
 			sb << renderNoSelection(property)
 			sb << '/>'
			sb as String
        }
    }
  }

  if (cls != null) {
    def id = UUID.randomUUID().toString().replaceAll('-','')
    def sw = new StringWriter()
    def pw = new PrintWriter(sw)
    pw.println()
    pw.println "<tk:toManyEdit id=\"table-${id}\" name=\"${property.name}\" list=\"\${${domainInstance}?.${property.name}}\" var=\"${property.name[0]}\" limit=\"10\" editable=\"true\" forceTable=\"true\" entityName=\"\${entityName}\" listClass=\"to-many-display\">"
    pw.println "    <g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"show\" id=\"\${${property.name[0]}?.id}\">\${${property.name[0]}?.encodeAsHTML()}</g:link>"
    pw.println '</tk:toManyEdit>'
    pw.println '<r:require module="modal"/>'
    pw.println '<ul class="nav nav-pills">'
    pw.println '<li>'
    pw.println "<div id=\"${id}-insert\" class=\"modal container hide fade ajaxModal\" tabindex=\"-1\"></div>"
    pw.println "<a id=\"btn-${id}-insert\" href=\"#${id}-insert\"><i class=\"icon-th-list\"></i> \${message(code: 'default.insert.label', args: [message(code: '${property.referencedDomainClass.propertyName}.label', default: '${property.referencedDomainClass.shortName}')])}</a>"
    pw.println '</li>'
    pw.println '<li>'
    pw.println "<div id=\"${id}\" class=\"modal container hide fade\" tabindex=\"-1\"></div>"
    pw.println "<a id=\"btn-${id}\" href=\"#${id}\"><i class=\"icon-plus\"></i> \${message(code: 'default.add.label', args: [message(code: '${property.referencedDomainClass.propertyName}.label', default: '${property.referencedDomainClass.shortName}')])}</a>"
    pw.println '</li>'
    pw.println '</ul>'
    pw.println """<r:script disposition='head'>\$(document).ready(function () {
prepare_ajax_modal('\${createLink(controller:'${property.referencedDomainClass.propertyName}',action:'create',params:['mode':'select','sender_id':'${id}','table_id':'table-${id}','callback_url':createLink(action:'insert',params: [property: '${property.name}', tableId:'table-${id}', deleteLabel: 'remove']),'${domainClass.propertyName}.id': ${domainInstance}?.id])} .first','${id}');
prepare_ajax_modal('\${createLink(controller:'${property.referencedDomainClass.propertyName}',action:'select',params:['mode':'select','sender_id':'${id}-insert','table_id':'table-${id}','callback_url':createLink(action:'insert',params: [property: '${property.name}', tableId:'table-${id}', deleteLabel: 'remove'])])} .first','${id}-insert');
});</r:script>
"""

    return sw.toString()
  }

}

private renderOneToMany(domainClass, property) {
  def id = UUID.randomUUID().toString().replaceAll('-','')
  def sw = new StringWriter()
  def pw = new PrintWriter(sw)
  pw.println()
  pw.println "<tk:toManyEdit id=\"table-${id}\" name=\"${property.name}\" list=\"\${${domainInstance}?.${property.name}}\" var=\"${property.name[0]}\" limit=\"10\" listClass=\"to-many-display\">"
  pw.println "    <g:link controller=\"${property.referencedDomainClass.propertyName}\" action=\"show\" id=\"\${${property.name[0]}?.id}\">\${${property.name[0]}?.encodeAsHTML()}</g:link>"
  pw.println '</tk:toManyEdit>'
  pw.println '<r:require module="modal"/>'
  pw.println '<ul class="nav nav-pills">'
  pw.println '<li>'
  pw.println "<div id=\"${id}\" class=\"modal container hide fade\" tabindex=\"-1\"></div>"
  pw.println "<a id=\"btn-${id}\" href=\"#${id}\"><i class=\"icon-plus\"></i> \${message(code: 'default.add.label', args: [message(code: '${property.referencedDomainClass.propertyName}.label', default: '${property.referencedDomainClass.shortName}')])}</a>"
  pw.println '</li>'
  pw.println '</ul>'
  pw.println """<r:script disposition='head'>\$(document).ready(function () {
prepare_ajax_modal('\${createLink(controller:'${property.referencedDomainClass.propertyName}',action:'create',params:['mode':'select','sender_id':'${id}','table_id':'table-${id}','callback_url':createLink(action:'insert',params: [property: '${property.name}', tableId:'table-${id}']),'${domainClass.propertyName}.id': ${domainInstance}?.id])} .first','${id}');
});</r:script>
"""

  return sw.toString()
}

private renderNumberEditor(domainClass, property) {
  if (!cp) {
    if (property.type == Byte) {
      return "<g:select name=\"${property.name}\" from=\"\${-128..127}\" class=\"range\" value=\"\${fieldValue(bean: ${domainInstance}, field: '${property.name}')}\" />"
    } else {
      return "<g:field type=\"number\" name=\"${property.name}\" value=\"\${${domainInstance}.${property.name}}\" />"
    }
  } else {
    def sb = new StringBuilder()
    if (cp.range) {
      sb << '<g:select name="' << property.name << '"'
      sb << ' from="${' << "${cp.range.from}..${cp.range.to}" << '}"'
      sb << ' class="range"'
      if (isRequired()) sb << ' required=""'
      sb << ' value="${' << "fieldValue(bean: ${domainInstance}, field: '${property.name}')" << '}"'
      sb << renderNoSelection(property)
      sb << '/>'
    } else if (cp.inList) {
      sb << '<g:select name="' << property.name << '"'
      sb << ' from="${' << "${domainInstance}.constraints.${property.name}.inList" << '}"'
      if (isRequired()) sb << ' required=""'
      sb << ' value="${' << "fieldValue(bean: ${domainInstance}, field: '${property.name}')" << '}"'
      sb << ' valueMessagePrefix="' << "${domainClass.propertyName}.${property.name}" << '"'
      sb << renderNoSelection(property)
      sb << '/>'
    } else {
      sb << '<g:field type="number" name="' << property.name << '"'
      if (cp.scale != null && cp.scale < 7) sb << ' step="' << BigDecimal.valueOf(1).movePointLeft(cp.scale).toString() << '"'
      else if (property.type in [float, double, Float, Double, BigDecimal]) sb << ' step="any"'
      if (cp.min != null) sb << ' min="' << cp.min << '"'
      if (cp.max != null) sb << ' max="' << cp.max << '"'
      if (isRequired()) sb << ' required=""'
      sb << ' value="${' << domainInstance << '.' << property.name << '}"'
      sb << '/>'
    }
    sb as String
  }
}

private renderBooleanEditor(domainClass, property) {
  if (!cp) {
    return "<bs:checkBox name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
  } else {
    def sb = new StringBuilder("<bs:checkBox name=\"${property.name}\" ")
    if (cp.widget) sb << "widget=\"${cp.widget}\" ";
    cp.attributes.each { k, v ->
      sb << "${k}=\"${v}\" "
    }
    sb << "value=\"\${${domainInstance}?.${property.name}}\" />"
    return sb.toString()
  }
}

private renderDateEditor(domainClass, property) {
  def precision = (property.type == Date || property.type == java.sql.Date || property.type == Calendar) ? "day" : "minute";
  if (!cp) {
    return "<bs:datePicker name=\"${property.name}\" precision=\"${precision}\" value=\"\${${domainInstance}?.${property.name}}\" />"
  } else {
    if (!cp.editable) {
      return "\${${domainInstance}?.${property.name}?.toString()}"
    } else {
      def sb = new StringBuilder("<bs:datePicker name=\"${property.name}\" ")
      if (cp.format) sb << "format=\"${cp.format}\" "
      if (cp.widget) sb << "widget=\"${cp.widget}\" "
      cp.attributes.each { k, v ->
        sb << "${k}=\"${v}\" "
      }
      if (!cp.attributes.precision) {
        sb << "precision=\"${precision}\" "
      }
      sb << " value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)} />"

      return sb.toString()
    }
  }
}

private renderSelectTypeEditor(type, domainClass, property) {
  if (!cp) {
    return "<g:${type}Select name=\"${property.name}\" value=\"\${${domainInstance}?.${property.name}}\" />"
  } else {
    def sb = new StringBuilder("<g:${type}Select name=\"${property.name}\" ")
    if (cp.widget) sb << "widget=\"${cp.widget}\" ";
    cp.attributes.each { k, v ->
      sb << "${k}=\"${v}\" "
    }
    sb << "value=\"\${${domainInstance}?.${property.name}}\" ${renderNoSelection(property)} />"
    return sb.toString()
  }
}

private renderNoSelection(property) {
  if (isOptional()) {
    if (property.manyToOne || property.oneToOne) {
      return " noSelection=\"['null': '']\""
    } else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar) {
      return "default=\"none\" noSelection=\"['': '']\""
    } else {
      return " noSelection=\"['': '']\""
    }
  }
  return ""
}

private boolean isRequired() {
  !isOptional()
}

private boolean isOptional() {
  if (!cp) {
    return false
  } else {
    cp.nullable || (cp.propertyType == String && cp.blank) || cp.propertyType in [boolean, Boolean]
  }
}
%>